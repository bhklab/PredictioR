cex = 1.8,
cat.cex = 1.5
)
dev.off()
library(stringr)
library(dplyr)
library(meta)
library(metafor)
library(forestplot)
library(ggplot2)
library(ggrepel)
library(gridExtra)
library(data.table)
library(MultiAssayExperiment)
library(RColorBrewer)
app_dir <- str_split(rstudioapi::getActiveDocumentContext()$path,'Insight')[[1]][1]
dir <- file.path(app_dir, 'Insight', "Roche/meta")
dir.assoc <- file.path(app_dir, 'Insight', "Roche/iobr")
dir.sex <- file.path(app_dir, 'Insight', "Roche/iobr_sex")
source(file.path(app_dir, 'Insight', "R/getHR.R"))
source(file.path(app_dir, 'Insight', "R/getSummarizedExperiment.R"))
source(file.path(app_dir, 'Insight', "R/getMetaAnalysis.R"))
app_dir <- str_split(rstudioapi::getActiveDocumentContext()$path,'Insight')[[1]][1]
geneSig_dir <- file.path(app_dir, 'Insight', 'data/iobr')
sig.info <- read.csv(file.path(geneSig_dir, "signature_INFO_iobr_predictio.csv"))
#sig.info <- sig.info[sig.info$study == "PredictIO", ]
sig.info <- sig.info[sig.info$Signature != "PredictIO_Bareche", ]
#sig.info <- sig.info[sig.info$Signature.type != "TBD", ]
dir0 <- file.path(app_dir, 'Insight', "Roche/iobr")
assoc_files <- list.files(dir0)[grep("association_", list.files(dir0))]
dir <- file.path(dir0, assoc_files)
geneSig_os <- lapply(1:length(dir), function(k){
load(file.path(dir[k], "sig_os.rda"))
if(class(res.os) == "list" ){
res.os <- do.call(rbind, res.os)
}
rownames(res.os) <- NULL
res.os
})
geneSig_os <- do.call(rbind, geneSig_os)
geneSig_os <- geneSig_os[geneSig_os$Gene %in% sig.info$Signature, ]
geneSig_pfs <- lapply(1:length(dir), function(k){
load(file.path(dir[k], "sig_pfs.rda"))
if(class(res.pfs) == "list" ){
res.pfs <- do.call(rbind, res.pfs)
}
rownames(res.pfs) <- NULL
res.pfs
})
geneSig_pfs <- do.call(rbind, geneSig_pfs)
geneSig_pfs <- geneSig_pfs[geneSig_pfs$Gene %in% sig.info$Signature, ]
geneSig_logreg <- lapply(1:length(dir), function(k){
load(file.path(dir[k], "sig_logreg.rda"))
rownames(res.logreg) <- NULL
res.logreg
})
geneSig_logreg <- do.call(rbind, geneSig_logreg)
geneSig_logreg <- geneSig_logreg[geneSig_logreg$Gene %in% sig.info$Signature, ]
##########################################
## logreg
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_percan_logreg.RData"))
df <- AllGeneSig_meta
df <- df[!is.na(df$Coef), ]
df <- df[df$Cancer_type == "Lung", ]
df <- df[order(df$FDR),]
table(df$FDR<0.05)
head(df)
## logreg
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_percan_logreg.RData"))
dir
file.path(dir, "meta_percan_logreg.RData")
app_dir <- str_split(rstudioapi::getActiveDocumentContext()$path,'Insight')[[1]][1]
dir <- file.path(app_dir, 'Insight', "Roche/meta")
dir.assoc <- file.path(app_dir, 'Insight', "Roche/iobr")
dir.sex <- file.path(app_dir, 'Insight', "Roche/iobr_sex")
source(file.path(app_dir, 'Insight', "R/getHR.R"))
source(file.path(app_dir, 'Insight', "R/getSummarizedExperiment.R"))
source(file.path(app_dir, 'Insight', "R/getMetaAnalysis.R"))
dir0 <- file.path(app_dir, 'Insight', "Roche/iobr")
assoc_files <- list.files(dir0)[grep("association_", list.files(dir0))]
dir <- file.path(dir0, assoc_files)
geneSig_os <- lapply(1:length(dir), function(k){
load(file.path(dir[k], "sig_os.rda"))
if(class(res.os) == "list" ){
res.os <- do.call(rbind, res.os)
}
rownames(res.os) <- NULL
res.os
})
geneSig_os <- do.call(rbind, geneSig_os)
geneSig_os <- geneSig_os[geneSig_os$Gene %in% sig.info$Signature, ]
geneSig_pfs <- lapply(1:length(dir), function(k){
load(file.path(dir[k], "sig_pfs.rda"))
if(class(res.pfs) == "list" ){
res.pfs <- do.call(rbind, res.pfs)
}
rownames(res.pfs) <- NULL
res.pfs
})
geneSig_pfs <- do.call(rbind, geneSig_pfs)
geneSig_pfs <- geneSig_pfs[geneSig_pfs$Gene %in% sig.info$Signature, ]
geneSig_logreg <- lapply(1:length(dir), function(k){
load(file.path(dir[k], "sig_logreg.rda"))
rownames(res.logreg) <- NULL
res.logreg
})
geneSig_logreg <- do.call(rbind, geneSig_logreg)
geneSig_logreg <- geneSig_logreg[geneSig_logreg$Gene %in% sig.info$Signature, ]
#############################################################
## Pan forestplot (top 10)
#############################################################
dir0 <- file.path(app_dir, 'Insight', "Roche/meta")
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_pan_logreg.RData"))
df <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
df <- df[order(df$FDR), ]
## logreg
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_percan_logreg.RData"))
df <- AllGeneSig_meta
df <- df[!is.na(df$Coef), ]
df <- df[df$Cancer_type == "Lung", ]
df <- df[order(df$FDR),]
table(df$FDR<0.05)
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_percan_logreg.RData"))
df <- AllGeneSig_meta
df <- df[!is.na(df$Coef), ]
df <- df[df$Cancer_type == "Lung", ]
df <- df[order(df$FDR),]
selected.sig <- df$Gene[1:28]
dat <- geneSig_logreg[geneSig_logreg$Gene %in% selected.sig, ]
dat <- dat[!is.na(dat$Coef), ]
for(i in 1:length(selected.sig)){
df <- dat[dat$Gene == selected.sig[i], ]
jpeg(file=file.path("C:/Insight/Roche/Fig/response/forestplot_lung", paste(selected.sig[i], "forestplot_pan_logreg.jpeg", sep="_")),
width = 1200, height = 1400, res = 150)
forestPlotPerCan(coef = df$Coef,
se = df$SE,
study  = df$Study,
pval = df$Pval,
n = df$N,
cancer.type = do.call(rbind, strsplit(df$Study, split='__', fixed=TRUE))[, 2],
treatment = df$Treatment,
feature = unique(df$Gene),
xlab = "logOR estimate",
label = "logOR")
dev.off()
}
dev.off
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dat <- geneSig_logreg[geneSig_logreg$Gene %in% selected.sig, ]
dat <- dat[!is.na(dat$Coef), ]
for(i in 1:length(selected.sig)){
df <- dat[dat$Gene == selected.sig[i], ]
jpeg(file=file.path("C:/Insight/Roche/Fig/response/forestplot_lung", paste(selected.sig[i], "forestplot_pan_logreg.jpeg", sep="_")),
width = 1200, height = 1400, res = 150)
forestPlotPerCan(coef = df$Coef,
se = df$SE,
study  = df$Study,
pval = df$Pval,
n = df$N,
cancer.type = do.call(rbind, strsplit(df$Study, split='__', fixed=TRUE))[, 2],
treatment = df$Treatment,
feature = unique(df$Gene),
xlab = "logOR estimate",
label = "logOR")
dev.off()
}
library(stringr)
library(dplyr)
library(meta)
library(metafor)
library(forestplot)
library(ggplot2)
library(ggrepel)
library(gridExtra)
library(data.table)
library(MultiAssayExperiment)
library(RColorBrewer)
app_dir <- str_split(rstudioapi::getActiveDocumentContext()$path,'Insight')[[1]][1]
dir <- file.path(app_dir, 'Insight', "Roche/meta")
dir.assoc <- file.path(app_dir, 'Insight', "Roche/iobr_sex")
source(file.path(app_dir, 'Insight', "R/getHR.R"))
source(file.path(app_dir, 'Insight', "R/getSummarizedExperiment.R"))
source(file.path(app_dir, 'Insight', "R/getMetaAnalysis.R"))
app_dir <- str_split(rstudioapi::getActiveDocumentContext()$path,'Insight')[[1]][1]
geneSig_dir <- file.path(app_dir, 'Insight', 'data/iobr')
sig.info <- read.csv(file.path(geneSig_dir, "signature_INFO_iobr_predictio.csv"))
#sig.info <- sig.info[sig.info$study == "PredictIO", ]
sig.info <- sig.info[sig.info$Signature != "PredictIO_Bareche", ]
#sig.info <- sig.info[sig.info$Signature.type != "TBD", ]
############################################################
## merge association results
############################################################
dir0 <- file.path(app_dir, 'Insight', "Roche/iobr_sex")
assoc_files <- list.files(dir0)[grep("association_", list.files(dir0))]
dir <- file.path(dir0, assoc_files)
## merge OS association results
res.os <- lapply(1:length(dir), function(k){
load(file.path(dir[k], "sig_sex_os.rda"))
if(class(res.os) == "list"){
res.os <- do.call(rbind, res.os)
}
res.os
})
res.os <- do.call(rbind, res.os)
geneSig_os <- res.os[!is.na(res.os$Coef), ]
geneSig_os$Sex <- sapply(1:nrow(geneSig_os), function(k){
strsplit(geneSig_os$Study[k], "__")[[1]][4]
})
## merge PFS association results
res.pfs <- lapply(1:length(dir), function(k){
load(file.path(dir[k], "sig_sex_pfs.rda"))
if(class(res.pfs) =="list"){
res.pfs <- do.call(rbind, res.pfs)
}
res.pfs
})
res.pfs <- do.call(rbind, res.pfs)
geneSig_pfs <- res.pfs[!is.na(res.pfs$Coef), ]
geneSig_pfs$Sex <- sapply(1:nrow(geneSig_pfs), function(k){
strsplit(geneSig_pfs$Study[k], "__")[[1]][4]
})
## merge Response association results
res.logreg <- lapply(1:length(dir), function(k){
load(file.path(dir[k], "sig_sex_logreg.rda"))
if(class(res.logreg) =="list"){
res.logreg <- do.call(rbind, res.logreg)
}
res.logreg
})
res.logreg <- do.call(rbind, res.logreg)
geneSig_logreg <- res.logreg[!is.na(res.logreg$Coef), ]
geneSig_logreg$Sex <- sapply(1:nrow(geneSig_logreg), function(k){
strsplit(geneSig_logreg$Study[k], "__")[[1]][4]
})
#######################################################
## Significant on per-cancer but not as pan-cancer
######################################################
### logreg: pan-sex
dir0 <- file.path(app_dir, 'Insight', "Roche/meta")
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_pansex_logreg.RData"))
df <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
df <- df[order(df$FDR), ]
df <- df[df$Gene != "PredictIO_Bareche", ]
table(df$FDR < 0.05)
selected.sig <- df[df$FDR < 0.05, "Gene"][1:22]
dat <- geneSig_logreg[geneSig_logreg$Gene %in% selected.sig,]
dat <- geneSig_logreg[geneSig_logreg$Gene %in% selected.sig,]
for(i in 1:length(selected.sig)){
df <- dat[dat$Gene == selected.sig[i], ]
jpeg(file=file.path("C:/Insight/Roche/Fig/response/forestplot_pansex",
paste(selected.sig[i], "forestplot_pansex__logreg.jpeg", sep="_")),
width = 1100, height = 700, res = 150)
forestPlot(coef = df$Coef,
se = df$SE,
study  = df$Study,
pval = df$Pval,
n = df$N,
cancer.type = do.call(rbind, strsplit(df$Study, split='__', fixed=TRUE))[, 2],
treatment = df$Treatment,
feature = unique(df$Gene),
xlab = "logOR estimate",
label = "logOR")
dev.off()
}
### logreg: Male
dir0 <- file.path(app_dir, 'Insight', "Roche/meta")
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_male_logreg.RData"))
df <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
df <- df[order(df$FDR), ]
df <- df[df$Gene != "PredictIO_Bareche", ]
table(df$FDR < 0.05)
selected.sig <- df[df$FDR < 0.05, "Gene"][1:44]
#dat <- geneSig_logreg[geneSig_logreg$Gene %in% selected.sig,]
dat <- geneSig_logreg[geneSig_logreg$Gene %in% selected.sig & geneSig_logreg$Sex == "M", ]
#######################################################
## Significant on per-cancer but not as pan-cancer
######################################################
### logreg: pan-sex
dir0 <- file.path(app_dir, 'Insight', "Roche/meta")
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_pansex_logreg.RData"))
df <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
df <- df[order(df$FDR), ]
df <- df[df$Gene != "PredictIO_Bareche", ]
selected.sig <- df[df$FDR < 0.05, "Gene"][1:22]
dat <- geneSig_logreg[geneSig_logreg$Gene %in% selected.sig,]
for(i in 1:length(selected.sig)){
df <- dat[dat$Gene == selected.sig[i], ]
jpeg(file=file.path("C:/Insight/Roche/Fig/response/forestplot_pansex",
paste(selected.sig[i], "forestplot_pansex__logreg.jpeg", sep="_")),
width = 1100, height = 700, res = 150)
forestPlot(coef = df$Coef,
se = df$SE,
study  = df$Study,
pval = df$Pval,
n = df$N,
cancer.type = do.call(rbind, strsplit(df$Study, split='__', fixed=TRUE))[, 2],
treatment = df$Treatment,
feature = unique(df$Gene),
xlab = "logOR estimate",
label = "logOR")
dev.off()
}
### logreg: Male
dir0 <- file.path(app_dir, 'Insight', "Roche/meta")
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_male_logreg.RData"))
df <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
df <- df[order(df$FDR), ]
df <- df[df$Gene != "PredictIO_Bareche", ]
selected.sig <- df[df$FDR < 0.05, "Gene"][1:44]
#dat <- geneSig_logreg[geneSig_logreg$Gene %in% selected.sig,]
dat <- geneSig_logreg[geneSig_logreg$Gene %in% selected.sig & geneSig_logreg$Sex == "M", ]
for(i in 1:length(selected.sig)){
df <- dat[dat$Gene == selected.sig[i], ]
jpeg(file=file.path("C:/Insight/Roche/Fig/response/forestplot_male", paste(selected.sig[i], "forestplot_male__logreg.jpeg", sep="_")),
width = 1100, height = 700, res = 150)
forestPlot(coef = df$Coef,
se = df$SE,
study  = df$Study,
pval = df$Pval,
n = df$N,
cancer.type = do.call(rbind, strsplit(df$Study, split='__', fixed=TRUE))[, 2],
treatment = df$Treatment,
feature = unique(df$Gene),
xlab = "logOR estimate",
label = "logOR")
dev.off()
}
#######################################################
## Significant on per-cancer but not as pan-cancer
######################################################
### logreg: pan-sex
dir0 <- file.path(app_dir, 'Insight', "Roche/meta")
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_pansex_logreg.RData"))
df <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
df <- df[order(df$FDR), ]
df <- df[df$Gene != "PredictIO_Bareche", ]
selected.sig <- df[df$FDR < 0.05, "Gene"][1:22]
dir0 <- file.path(app_dir, 'Insight', "Roche/meta")
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_pansex_logreg.RData"))
df <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
df <- df[order(df$FDR), ]
df <- df[df$Gene != "PredictIO_Bareche", ]
selected.sig <- df[df$FDR < 0.05, "Gene"][1:22]
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_pansex_logreg.RData"))
df <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
df <- df[order(df$FDR), ]
df <- df[df$Gene != "PredictIO_Bareche", ]
selected.sig <- df[df$FDR < 0.05, "Gene"][1:22]
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_male_logreg.RData"))
df <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
df <- df[order(df$FDR), ]
df <- df[df$Gene != "PredictIO_Bareche", ]
selected.sig_male <- df[df$FDR < 0.05, "Gene"][1:44]
intersect(selected.sig, selected.sig_male)
setdiff(selected.sig, selected.sig_male)
setdiff(selected.sig_male, selected.sig)
selected.sig
dir0 <- file.path(app_dir, 'Insight', "Roche/meta")
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_pansex_logreg.RData"))
df <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
df <- df[order(df$FDR), ]
df <- df[df$Gene != "PredictIO_Bareche", ]
selected.sig <- df[df$FDR < 0.05, "Gene"][1:22]
dat <- geneSig_logreg[geneSig_logreg$Gene %in% selected.sig,]
setdiff(selected.sig, selected.sig_male)
length(selected.sig)
length(intersect(selected.sig, selected.sig_male))
dir <- file.path(dir0, "os")
load(file.path(dir, "meta_pansex_os.RData"))
os <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
os <- os[os$Gene %in% sig.info$Signature, ]
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_pansex_logreg.RData"))
logreg <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
logreg <- logreg[logreg$Gene %in% sig.info$Signature, ]
logreg_pan <- logreg[logreg$FDR < 0.05, ]
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_female_logreg.RData"))
logreg <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
logreg <- logreg[logreg$Gene %in% sig.info$Signature, ]
logreg_female <- logreg[logreg$FDR < 0.05, ]
dir <- file.path(dir0, "response")
load(file.path(dir, "meta_male_logreg.RData"))
logreg <- AllGeneSig_meta[!is.na(AllGeneSig_meta$Coef), ]
logreg <- logreg[logreg$Gene %in% sig.info$Signature, ]
logreg_male <- logreg[logreg$FDR < 0.05, ]
dim(logreg_male)
dim(logreg_pan)
library(IOBR)
signature_tme
length(signature_tme)
length(signature_metabolism)
length(signature_tumor)
names(signature_tme)
length(signature_collection)
signature_sc
signature_collection_citation
rm(list=ls())
detach("package:VennDiagram", unload = TRUE)
library(PredictioR)
library(devtools)
devtools::document()
getwd()
setwd("C:/PredictioR")
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("bhklab/PredictioR")
library(PredictioR)
remove.packages("PredictioR")
devtools::install_github("bhklab/PredictioR")
library(PredictioR)
rm(list=ls())
ls()
devtools::install_github("bhklab/PredictioR")
getwd()
devtools::document()
library(PredictioR)
remove.packages("PredictioR")
rm(list=ls())
devtools::install_git("bhklab/PredictioR")
library(devtools)
devtools::install_github("bhklab/PredictioR")
library(PredictioR)
devtools::document()
library(PredictioR)
remove.packages("PredictioR")
devtools::install_github("bhklab/PredictioR")
library(PredictioR)
devtools::document()
library(PredictioR)
remove.packages("PredictioR")
devtools::install_github("bhklab/PredictioR")
library(PredictioR)
remove.packages("PredictioR")
devtools::document()
getwd()
devtools::install_github("bhklab/PredictioR")
devtools::install_github("bhklab/PredictioR")
library(PredictioR)
devtools::document()
library(PredictioR)
remove.packages("PredictioR")
devtools::install_github("bhklab/PredictioR")
library(PredictioR)
devtools::document()
library(PredictioR)
remove.packages("PredictioR")
devtools::install_github("bhklab/PredictioR")
library(PredictioR)
remove.packages("PredictioR")
devtools::install_github("bhklab/PredictioR")
library(PredictioR)
ICB_Braun <- readRDS("C:/PredictioR/data-raw/ICB_Braun.rds")
ICB_Kim <- readRDS("C:/PredictioR/data-raw/ICB_Kim.rds")
ICB_Van_Allen <- readRDS("C:/PredictioR/data-raw/ICB_Van_Allen.rds")
ICB_Van_Allen
ICB_Braun
ICB_Kim
usethis::use_data(ICB_Braun)
usethis::use_data(ICB_Kim)
usethis::use_data(ICB_Van_Allen)
use_r("data")
usethis::use_r("data")
usethis::use_r("ICB_Braun")
usethis::use_r("ICB_Kim")
usethis::use_r("ICB_Van_Allen")
devtools::document()
load("C:/PredictioR/data-raw/ICB_Gide__Melanoma__PD-(L)1.rda")
load("C:/PredictioR/data/ICB/ICB_Gide__Melanoma__PD-(L)1.rda")
ls()
dat_icb
ICB_Gide <- dat_icb
load("C:/PredictioR/data/ICB/ICB_Hugo__Melanoma__PD-(L)1.rda")
ICB_Hugo <- dat_icb
load("C:/PredictioR/data/ICB/ICB_Liu__Melanoma__PD-(L)1.rda")
ICB_Liu <- dat_icb
usethis::use_r("ICB_Gide")
usethis::use_data("ICB_Gide")
usethis::use_data(ICB_Gide)
usethis::use_data(ICB_Hugo)
usethis::use_data(ICB_Liu)
usethis::use_r("ICB_Liu")
usethis::use_r("ICB_Gide")
library(PredictioR)
usethis::use_r("ICB_Hugo")
usethis::use_data("ICB_Hugo")
usethis::use_data(ICB_Hugo)
devtools::document()
