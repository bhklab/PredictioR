metric = "ROC",
tuneGrid = hyperparam_grid)
bst_model$bestTune
############################################################
## Train model: XGBoost using caret to tune parameters
############################################################
set.seed(135)
# Tuning hyper-parameters
hyperparam_grid <- expand.grid(
nrounds = seq(from = 10, to = 300, by = 30),
eta = c(0.01, 0.03, 0.05, 0.1, 0.3),
max_depth = c(3, 4, 5, 6, 7, 8, 9, 10),
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
# Define control function for train
control <- trainControl(method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = FALSE,
allowParallel = FALSE)
# Train the model using caret's train function with xgboost method
bst_model <- train(x = trainExpr,
y = trainClin$response,
method = "xgbTree",
trControl = control,
metric = "ROC",
tuneGrid = hyperparam_grid)
bst_model$bestTune
##############################################
# Using Caret for the best hyper-parameters
##############################################
xgb_model <- train(x = trainExpr,
y = trainClin$response,
method = "xgbTree",
trControl = control,
metric = "ROC",
tuneGrid = bst_model$bestTune)
final_model <-xgb_model$finalModel
importance_matrix <- xgb.importance(model = final_model,
feature_names = colnames(trainExpr))
print(importance_matrix)
xgb.plot.importance(importance_matrix)
xgb.plot.importance(importance_matrix)
xgb.plot.importance(importance_matrix)
###########################################################
## load INSPIRE data
###########################################################
## test data INSPIRE
load("C:/Insight/Roche/PMATCH/data/ICB_INSPIRE_Pan_PD-(L)1.rda")
testClin <- data.frame(colData(dat_icb))
testClin <- testClin[!is.na(testClin$response), ]
missing_features <- setdiff(colnames(trainExpr), colnames(testExpr))
# load test data signatures
load("C:/Insight/Roche/ML/result/sig_score_INSPIRE.rda")
testExpr <- t(geneSig.score)
testExpr <- testExpr[testClin$patientid, ]
missing_features <- setdiff(colnames(trainExpr), colnames(testExpr))
missing_features
# Add missing features to testExpr and set values to 0
testExpr_missing <- lapply(1:length(missing_features), function(k){
rep(0, nrow(testExpr))
})
testExpr_missing <- do.call(cbind, testExpr_missing)
colnames(testExpr_missing) <- missing_features
rownames(testExpr_missing) <- rownames(testExpr)
testExpr <- cbind(testExpr, testExpr_missing)
# Ensure the order is correct
testExpr <- testExpr[, colnames(trainExpr)]
# Make predictions and evaluate
predictions <- predict(final_model, newdata = testExpr)
roc_obj <- roc(testClin$response, predictions)
auc_value <- auc(roc_obj)
print(auc_value)
## ROC curve
roc_data <- data.frame(
tpr = roc_obj$sensitivities,
fpr = 1 - roc_obj$specificities
)
ggroc(roc_obj, aes="linetype", color="#d94801", size = 1.2, legacy.axes = TRUE) +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color="#08306b", linetype="dashed", size = 1.2) +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
ggtitle("ROC Curve: AUC = 0.70") +
theme(axis.text.x = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), plot.background = element_blank(),
axis.line = element_line(colour = "black"), legend.position = "bottom",
legend.text = element_text(size = 7, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"))
ggroc(roc_obj, aes="linetype", color="#d94801", size = 1.2, legacy.axes = TRUE) +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color="#08306b", linetype="dashed", size = 1.2) +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
ggtitle("ROC Curve: AUC = 0.70") +
theme(axis.text.x = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), plot.background = element_blank(),
axis.line = element_line(colour = "black"), legend.position = "bottom",
legend.text = element_text(size = 7, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"))
rm(list=ls())
dat <- qread(file = "C:/SARC_project/sts/result/gene_drug_assoc_sts_late_integrated_celligner_lm_7pcs.qs")
library(qs)
dat <- qread(file = "C:/SARC_project/sts/result/gene_drug_assoc_sts_late_integrated_celligner_lm_7pcs.qs")
head(dat)
sig <- dat[dat$padj < 0.15, ]
unique(sig$drug)
sig[sig$drug == "Gemcitabine", ]
sig[sig$drug == "Paclitaxel", ]
sig <- dat[dat$padj < 0.2, ]
head(sig)
tail(sig)
write.csv(sig, file = "C:/SARC_project/sts/result/gene_drug_sts.csv")
qsave(sig, file = "C:/SARC_project/sts/result/gene_drug_sts.qs")
rm(list=ls())
dir <- "C:/Insight/Roche/ML/dataTest"
load(file = file.path(dir, "testDataINSPIRE.rda"))
ls()
names(dat)
PredictIOSig <- dat$PredictIOSig
selected_signature <- dat$selected_signature
signatureData <- dat$signatureData
testData
dat$testData
load(file = file.path(dir, "ICB_Hartwig__Pan__PD-(L)1.rda"))
ls()
dat_icb
dat0 <- list("testData" = dat_icb, "PredictIOSig" = PredictIOSig, "signatureData" = signatureData, "selected_signature" = selected_signature)
dat <- list("testData" = dat_icb, "PredictIOSig" = PredictIOSig, "signatureData" = signatureData, "selected_signature" = selected_signature)
save(dat, file = file.path(dir, "testDataHartwig.rda"))
load(file = file.path(dir, "ICB_IMmotion150__Kidney__PD-(L)1.rda"))
dat_icb
dat <- list("testData" = dat_icb, "PredictIOSig" = PredictIOSig, "signatureData" = signatureData, "selected_signature" = selected_signature)
save(dat, file = file.path(dir, "testDataIMmotion150.rda"))
load(file = file.path(dir, "ICB_POPLAR__Lung__PD-(L)1.rda"))
dat <- list("testData" = dat_icb, "PredictIOSig" = PredictIOSig, "signatureData" = signatureData, "selected_signature" = selected_signature)
save(dat, file = file.path(dir, "testDataPOPLAR.rda"))
rm(list=ls())
library(data.table)
library(xgboost)
library(caret)
library(dplyr)
library(ggplot2)
library(PredictioR)
library(GSVA)
library(pROC)
library(MultiAssayExperiment)
dir <- "C:/Insight/Roche/ML/result"
# load data: pan-cancer and response
load("C:/Insight/Roche/meta/response/meta_pan_logreg.RData")
signature_name <- AllGeneSig_meta[AllGeneSig_meta$FDR < 0.05, "Gene"]
# load tarin clinical and expression data
load(file.path(dir, "clin.rda"))
trainClin <- clin
group <- ifelse(trainClin$response == "R", 1, 0)
load(file=file.path(dir, "sig_score.rda"))
trainExpr <- t(geneSig.score)
# common signatures between train and test
trainExpr <- trainExpr[, colnames(trainExpr) %in% signature_name]
############################################################
## Train model: XGBoost using caret to tune parameters
############################################################
set.seed(135)
# Tuning hyper-parameters
hyperparam_grid <- expand.grid(
nrounds = seq(from = 60, to = 300, by = 50),
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
gamma = c(1, 5),
colsample_bytree = c(0.3, 0.6, 0.8),
min_child_weight = c(1, 3, 5),
subsample = 1
)
# Define control function for train
control <- trainControl(method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = FALSE,
allowParallel = FALSE)
# Train the model using caret's train function with xgboost method
bst_model <- train(x = trainExpr,
y = trainClin$response,
method = "xgbTree",
trControl = control,
metric = "ROC",
tuneGrid = hyperparam_grid)
bst_model$bestTune
############################################################
## Train model: XGBoost using caret to tune parameters
############################################################
set.seed(135)
# Tuning hyper-parameters
hyperparam_grid <- expand.grid(
nrounds = seq(from = 60, to = 300, by = 50),
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
gamma = c(1, 5),
colsample_bytree = c(0.3, 0.6, 0.8),
min_child_weight = c(1, 3, 5),
subsample = c(0.5, 0.7, 1)
)
# Define control function for train
control <- trainControl(method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = FALSE,
allowParallel = FALSE)
# Train the model using caret's train function with xgboost method
bst_model <- train(x = trainExpr,
y = trainClin$response,
method = "xgbTree",
trControl = control,
metric = "ROC",
tuneGrid = hyperparam_grid)
bst_model$bestTune
##############################################
# Using Caret for the best hyper-parameters
##############################################
xgb_model <- train(x = trainExpr,
y = trainClin$response,
method = "xgbTree",
trControl = control,
metric = "ROC",
tuneGrid = bst_model$bestTune)
final_model <-xgb_model$finalModel
importance_matrix <- xgb.importance(model = final_model,
feature_names = colnames(trainExpr))
print(importance_matrix)
xgb.plot.importance(importance_matrix)
xgb.plot.importance(importance_matrix)
###########################################################
## load INSPIRE data
###########################################################
## test data INSPIRE
load("C:/Insight/Roche/PMATCH/data/ICB_INSPIRE_Pan_PD-(L)1.rda")
testClin <- data.frame(colData(dat_icb))
testClin <- testClin[!is.na(testClin$response), ]
# load test data signatures
load("C:/Insight/Roche/ML/result/sig_score_INSPIRE.rda")
testExpr <- t(geneSig.score)
testExpr <- testExpr[testClin$patientid, ]
missing_features <- setdiff(colnames(trainExpr), colnames(testExpr))
# Add missing features to testExpr and set values to 0
testExpr_missing <- lapply(1:length(missing_features), function(k){
rep(0, nrow(testExpr))
})
testExpr_missing <- do.call(cbind, testExpr_missing)
colnames(testExpr_missing) <- missing_features
rownames(testExpr_missing) <- rownames(testExpr)
testExpr <- cbind(testExpr, testExpr_missing)
# Ensure the order is correct
testExpr <- testExpr[, colnames(trainExpr)]
# Make predictions and evaluate
predictions <- predict(final_model, newdata = testExpr)
roc_obj <- roc(testClin$response, predictions)
auc_value <- auc(roc_obj)
print(auc_value)
## ROC curve
roc_data <- data.frame(
tpr = roc_obj$sensitivities,
fpr = 1 - roc_obj$specificities
)
# Create the plot with ggplot2
jpeg(file = file.path(dir, "roc_curve_INSPIRE.jpeg"), width = 650, height = 650, res = 150)
ggroc(roc_obj, aes="linetype", color="#d94801", size = 1.2, legacy.axes = TRUE) +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color="#08306b", linetype="dashed", size = 1.2) +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
ggtitle("ROC Curve: AUC = 0.70") +
theme(axis.text.x = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), plot.background = element_blank(),
axis.line = element_line(colour = "black"), legend.position = "bottom",
legend.text = element_text(size = 7, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 12, face = "bold"))
dev.off()
length(colnames(trainExpr))
library(data.table)
library(xgboost)
library(caret)
library(dplyr)
library(ggplot2)
library(PredictioR)
library(GSVA)
library(pROC)
library(MultiAssayExperiment)
dir <- "C:/Insight/Roche/ML/result"
#################################################
## load validation data and signature data
#################################################
load(file.path("C:/Insight/Roche/ML/dataTest", "testDataINSPIRE.rda"))
paletteer_d("IslamicArt::damascus")
library(paletteer)
paletteer_d("IslamicArt::damascus")
library(oncotree)
class(sig)
dir <- "C:/Insight/Roche/ML/result"
#################################################
## load validation data and signature data
#################################################
load(file.path("C:/Insight/Roche/ML/dataTest", "testDataINSPIRE.rda"))
testClin <- data.frame(colData(dat$testData))
testClin <- testClin[!is.na(testClin$response), ]
group <- ifelse(testClin$response == "R", 0, 1)
expr <- assay(dat$testData)
expr <- expr[, testClin$patientid]
signature <- dat$signatureData$signature
signature_info <- dat$signatureData$sig.info
selected_signature <- dat$selected_signature # modify to columns of exprTrain
load(file.path(dir, paste(study.icb, "sig_score.rda", sep="_")))
study.icb <- "PanTest_INSPIRE"
library(devtools)
library(roxygen2)
devtools::document()
setwd("C:/PredictioR")
devtools::document()
library(PredictioR)
remove.packages("PredictioR")
devtools::install_github("bhklab/PredictioR")
library(PredictioR)
geneSigPredictIO
dat.icb = ICB_small_Mariathasan
sig = PredictIO_Bareche
sig.name = 'PredictIO_Bareche'
geneSigPredictIO(dat.icb = ICB_small_Mariathasan,
sig = PredictIO_Bareche,
sig.name = 'PredictIO_Bareche',
missing.perc = 0.5,
const.int = 0.001,
n.cutoff = 15,
sig.perc = 0.8,
study = 'ICB_Mariathasan')
library(GSVA)
geneSigPredictIO(dat.icb = ICB_small_Mariathasan,
sig = PredictIO_Bareche,
sig.name = 'PredictIO_Bareche',
missing.perc = 0.5,
const.int = 0.001,
n.cutoff = 15,
sig.perc = 0.8,
study = 'ICB_Mariathasan')
library(networkD3)
library(dplyr)
library(stringr)
library(forestplot)
library(data.table)
library(PredictioR)
library(MultiAssayExperiment)
app_dir <- str_split(rstudioapi::getActiveDocumentContext()$path,'Insight')[[1]][1]
#dir <- file.path(app_dir, 'Insight', "data/ICB")
#dir.sex <- file.path(app_dir, 'Insight', "data/ICBSex")
dirPublic <- "C:/Users/farno/OneDrive/Desktop/files_io/ICB"
dirPrivate <- "C:/Users/farno/OneDrive/Desktop/files_io/ICB_validation"
############################################
## load all data
############################################
## public/discovery cohorts
publicExpr <- lapply(1:length(list.files(dirPublic)), function(k){
load(file.path(dirPublic, list.files(dirPublic)[k]))
dat_icb
})
study.icb <- substr(list.files(dirPublic), 5, nchar(list.files(dirPublic)) - 4)
names(publicExpr) <- study.icb
study.icb.public <- names(publicExpr)
## private/validation cohorts
privateExpr <- lapply(1:length(list.files(dirPrivate)), function(k){
load(file.path(dirPrivate, list.files(dirPrivate)[k]))
dat_icb
})
study.icb <- substr(list.files(dirPrivate), 5, nchar(list.files(dirPrivate)) - 4)
names(privateExpr) <- study.icb
study.icb.private <- names(privateExpr)
## merge expression data
expr <- c(publicExpr, privateExpr)
study.icb <- c(study.icb.public, study.icb.private)
dat <- lapply(1:length(expr), function(k){
clin <- colData(expr[[k]])
cancer <- unique(clin$cancer_type)
data.frame(Study = strsplit(study.icb[k], "__")[[1]][1],
Cancer_type = cancer,
Sample = as.numeric(table(clin$cancer_type)),
Treatment = unique(clin$treatment) )
})
dat <- do.call(rbind, dat)
dat$Cancer_type <- ifelse(dat$Cancer_type %in% c("Head and neck", "HNC", "Mesothelium",
"Other", "Ovary", "Prostate", "Breast"), "Other", dat$Cancer_type)
dat$Type <- ifelse(dat$Study %in% c("Hartwig", "IMmotion150", "INSPIRE", "POPLAR"), "Private", "Public")
data <- dat
# Calculate total patients
total_patients <- sum(data$Sample, na.rm = TRUE)
# Summarize data for Sankey diagram
summary_sankey <- data %>%
group_by(Type, Cancer_type, Treatment) %>%
summarise(Total_Patients = sum(Sample, na.rm = TRUE), .groups = "drop")
# Prepare Nodes with counts and percentages
nodes <- data.frame(
name = c(
paste0("Total\n(", total_patients, ")"),
paste0(unique(summary_sankey$Type), "\n(",
round(sapply(unique(summary_sankey$Type), function(ce)
sum(summary_sankey$Total_Patients[summary_sankey$Type == ce]) / total_patients * 100)),
"%)"),
paste0(unique(summary_sankey$Cancer_type), "\n(",
round(sapply(unique(summary_sankey$Cancer_type), function(ct)
sum(summary_sankey$Total_Patients[summary_sankey$Cancer_type == ct]) / total_patients * 100)),
"%)"),
paste0(unique(summary_sankey$Treatment), "\n(",
round(sapply(unique(summary_sankey$Treatment), function(t)
sum(summary_sankey$Total_Patients[summary_sankey$Treatment == t]) / total_patients * 100)),
"%)")
)
)
# Prepare Links
# First layer: Total Patients to Type (Public or Private)
links <- summary_sankey %>%
group_by(Type) %>%
summarise(Total_Patients = sum(Total_Patients)) %>%
mutate(
source = 0, # First node (Total Patients)
target = match(paste0(Type, "\n(",
round(sapply(Type, function(ct)
sum(summary_sankey$Total_Patients[summary_sankey$Type == ct]) / total_patients * 100)),
"%)"), nodes$name) - 1,
value = Total_Patients
) %>%
select(source, target, value)
# Second layer: Type to Cancer Types
links <- links %>%
bind_rows(
summary_sankey %>%
mutate(
source = match(paste0(Type, "\n(",
round(sapply(Type, function(ct)
sum(summary_sankey$Total_Patients[summary_sankey$Type == ct]) / total_patients * 100)),
"%)"), nodes$name) - 1,
target = match(paste0(Cancer_type, "\n(",
round(sapply(Cancer_type, function(t)
sum(summary_sankey$Total_Patients[summary_sankey$Cancer_type == t]) / total_patients * 100)),
"%)"), nodes$name) - 1,
value = Total_Patients
) %>%
select(source, target, value)
)
# Third layer: Cancer Types to Treatments
links <- links %>%
bind_rows(
summary_sankey %>%
mutate(
source = match(paste0(Cancer_type, "\n(",
round(sapply(Cancer_type, function(ct)
sum(summary_sankey$Total_Patients[summary_sankey$Cancer_type == ct]) / total_patients * 100)),
"%)"), nodes$name) - 1,
target = match(paste0(Treatment, "\n(",
round(sapply(Treatment, function(t)
sum(summary_sankey$Total_Patients[summary_sankey$Treatment == t]) / total_patients * 100)),
"%)"), nodes$name) - 1,
value = Total_Patients
) %>%
select(source, target, value)
)
# Create Sankey Diagram
sankey <- sankeyNetwork(
Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
units = "Patients", fontSize = 14, nodeWidth = 30,
nodePadding = 10, width = 900, height = 300, colourScale = my_color
)
set.seed(123)
my_color <- 'd3.scaleOrdinal() .range(["#4685A0FF", "#D0937DFF" , "#B1AF53FF",
"#7C7189FF", "#D04E59FF", "#01353DFF", "#7AD4E4FF", "#DFA398FF",
"#659794FF", "#AAC197FF", "#C3F9E9FF", "#BFAB25FF", "#204035FF",
"#735231FF", "#735231FF"])'
# Create Sankey Diagram
sankey <- sankeyNetwork(
Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
units = "Patients", fontSize = 14, nodeWidth = 30,
nodePadding = 10, width = 900, height = 300, colourScale = my_color
)
saveNetwork(sankey, file = "C:/Users/farno/OneDrive/Desktop/files_io/saneky/Sankey.html")
saveNetwork(sankey, file = "C:/Insight/Roche/Fig/clinical/Sankey.html")
# Create Sankey Diagram
sankey <- sankeyNetwork(
Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
units = "Patients", fontSize = 14, nodeWidth = 30,
nodePadding = 10, width = 800, height = 300, colourScale = my_color
)
saveNetwork(sankey, file = "C:/Insight/Roche/Fig/clinical/Sankey.html")
###########################################################
## load final data and evaluate MV pipeline
###########################################################
load(file.path(dir, "trainModel4.RData"))
mv.res$bestTune
